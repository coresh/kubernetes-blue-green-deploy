#!/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

if [ ! -f config ];
then
    echo "Missing config file" 1>&2
    exit 1
fi
source config

# Validate application and deployment
kubectl get ingress $application_name --namespace=$namespace > /dev/null 2>&1
if [ $? -ne 0 ];
then
    echo "Ingress controller for application does not exists" 1>&2
    exit 1
fi

kubectl get service $application_name --namespace=$namespace > /dev/null 2>&1
if [ $? -ne 0 ];
then
    echo "Service for application does not exists" 1>&2
    exit 1
fi

kubectl get deployment ${application_name}-${build_id} --namespace=$namespace > /dev/null 2>&1
if [ $? -eq 0 ];
then
    echo "Deployment already exists" 1>&2
    exit 1
fi

kubectl get hpa ${application_name}-${build_id} --namespace=$namespace > /dev/null 2>&1
if [ $? -eq 0 ];
then
    echo "Autoscale group already exists" 1>&2
    exit 1
fi

has_worker=0
if [ -f ../boot ] || [ -f ../WorkerBoot ] || [ -f ../bin/console ]; then
    has_worker=1
    echo "Deployment needs a worker too"
else
    echo "Deployment does not have a worker"
fi

# Get current config
current_service_build="`kubectl get service $application_name -o yaml --namespace=$namespace | grep build:`"
current_build_id=`echo $current_service_build | cut -d ":" -f 2 | tr -d ' ' | tr -d '"'`
current_release="${application_name}-${current_build_id}"

# Apply new autoscale and startup new deployment
echo "Deploying autoscaler for application and deployment"
cat autoscale.yaml deployment.yaml \
    | sed "s/{{application_name}}/$application_name/" \
    | sed "s/{{build_id}}/$build_id/" \
    | sed "s/{{deploy_name}}/${application_name}-${build_id}/" \
    | sed "s|{{image}}|$image|" \
    | sed "s|{{git_repo}}|$git_repo|" \
    | sed "s/{{ssh_key}}/$ssh_key/" \
    | sed "s/{{namespace}}/$namespace/" \
    | sed "s/{{hostname}}/$hostname/" \
    | sed "s/{{NEW_RELIC_LICENSE_KEY}}/$NEW_RELIC_LICENSE_KEY/" \
    | sed "s/{{bamboo_deploy_release}}/$bamboo_deploy_release/" \
    | kubectl apply -f -

echo "Waiting for ${application_name}-${build_id} to be available:"
check=0
failtime=$(($(date +%s) + 5 * 60))
while [ $check -lt 1 ];
do
    # check deployment
    check_app=`kubectl get deployment ${application_name}-${build_id} -o yaml --namespace=$namespace | grep "^  availableReplicas:" | cut -d ":" -f 2 | tr -d ' ' | grep -Eo '[0-9]+'`

    if [ "$check_app" == "" ];
    then
        check=0

        echo "."
        sleep 5
    else
        check=1
    fi

    if [ $(date +%s) -gt "$failtime" ];
    then
         echo "... Failed"
         echo "Going to cleanup"
         kubectl delete hpa ${application_name}-${build_id} --namespace=$namespace
         kubectl delete deployment ${application_name}-${build_id} --namespace=$namespace
         kubectl delete rs ${application_name}-${build_id} --namespace=$namespace > /dev/null 2>&1
         exit 1
    fi
done

echo ".. Done"

# Worker
if [ $has_worker -eq 1 ]; then

    echo "Deploying worker"
    cat worker.yaml \
        | sed "s/{{application_name}}/$application_name/" \
        | sed "s/{{build_id}}/$build_id/" \
        | sed "s/{{deploy_name}}/${application_name}-${build_id}/" \
        | sed "s|{{image}}|$image|" \
        | sed "s|{{git_repo}}|$git_repo|" \
        | sed "s/{{ssh_key}}/$ssh_key/" \
        | sed "s/{{namespace}}/$namespace/" \
        | sed "s/{{NEW_RELIC_LICENSE_KEY}}/$NEW_RELIC_LICENSE_KEY/" \
        | sed "s/{{bamboo_deploy_release}}/$bamboo_deploy_release/" \
        | kubectl apply -f -

    echo "Waiting for wrk-${application_name}-${build_id} to be available:"
    check=0
    failtime=$(($(date +%s) + 5 * 60))
    while [ $check -lt 1 ];
    do
        check_wrk=`kubectl get deployment wrk-${application_name}-${build_id} -o yaml --namespace=$namespace | grep "^  availableReplicas:" | cut -d ":" -f 2 | tr -d ' ' | grep -Eo '[0-9]+'`

        if [ "$check_wrk" == "" ];
        then
            check=0
            echo "."
            sleep 5
        else
            check=1
        fi

        if [ $(date +%s) -gt "$failtime" ];
        then
             echo "... Failed"
             echo "Going to cleanup"
             kubectl delete hpa ${application_name}-${build_id} --namespace=$namespace
             kubectl delete deployment ${application_name}-${build_id} --namespace=$namespace
             kubectl delete deployment wrk-${application_name}-${build_id} --namespace=$namespace
             kubectl delete rs ${application_name}-${build_id} --namespace=$namespace > /dev/null 2>&1
             kubectl delete rs wrk-${application_name}-${build_id} --namespace=$namespace > /dev/null 2>&1
             exit 1
        fi
    done

    echo ".. Done"
fi

# Switch servide to point to new release
echo "Switching to build id: $build_id"
kubectl get services $application_name -o yaml --namespace=$namespace | sed "s/build:.*$/build: \"$build_id\"/" | kubectl replace -f -

# - delete autoscale
kubectl get hpa $current_release --namespace=$namespace > /dev/null 2>&1
if [ $? -eq 0 ];
then
    kubectl delete hpa $current_release --namespace=$namespace
fi

# - delete deployment
kubectl get deployment $current_release --namespace=$namespace > /dev/null 2>&1
if [ $? -eq 0 ];
then
    kubectl delete deployment $current_release --namespace=$namespace
fi

# - delete replica
kubectl get rs $current_release --namespace=$namespace > /dev/null 2>&1
if [ $? -eq 0 ];
then
    kubectl delete rs $current_release --namespace=$namespace
fi

# - delete deployment worker if it exits
kubectl get deployment wrk-$current_release --namespace=$namespace > /dev/null 2>&1
if [ $? -eq 0 ];
then
    kubectl delete deployment wrk-$current_release --namespace=$namespace
fi

# - delete deployment worker if it exits
kubectl get rs wrk-$current_release --namespace=$namespace > /dev/null 2>&1
if [ $? -eq 0 ];
then
    kubectl delete rs wrk-$current_release --namespace=$namespace
fi
