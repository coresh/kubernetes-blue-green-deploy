#!/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

if [ ! -f config ];
then
    echo "Missing config file" 1>&2
    exit 1
fi
source config

# Validate application and deployment
kubectl get ingress $application_name --namespace=$namespace > /dev/null 2>&1
if [ $? -ne 0 ];
then
    echo "Ingress controller for application does not exists" 1>&2
    exit 1
fi

kubectl get service $application_name --namespace=$namespace > /dev/null 2>&1
if [ $? -ne 0 ];
then
    echo "Service for application does not exists" 1>&2
    exit 1
fi

kubectl get deployment ${application_name}-${build_id} --namespace=$namespace > /dev/null 2>&1
if [ $? -eq 0 ];
then
    echo "Deployment already exists" 1>&2
    exit 1
fi

kubectl get hpa ${application_name}-${build_id} --namespace=$namespace > /dev/null 2>&1
if [ $? -eq 0 ];
then
    echo "Autoscale group already exists" 1>&2
    exit 1
fi

# Get current config
current_service_build="`kubectl get service $application_name -o yaml --namespace=$namespace | grep build:`"
current_build_id=`echo $current_service_build | cut -d ":" -f 2 | tr -d ' ' | tr -d '"'`
current_release="${application_name}-${current_build_id}"

# Apply new autoscale and startup new deployment
cat autoscale.yaml deployment.yaml \
    | sed "s/{{application_name}}/$application_name/" \
    | sed "s/{{build_id}}/$build_id/" \
    | sed "s/{{deploy_name}}/${application_name}-${build_id}/" \
    | sed "s|{{image}}|$image|" \
    | sed "s|{{git_repo}}|$git_repo|" \
    | sed "s/{{ssh_key}}/$ssh_key/" \
    | sed "s/{{namespace}}/$namespace/" \
    | kubectl apply -f -

echo -n "Waiting for ${application_name}-${build_id} to be available "
check=0
failtime=$(($(date +%s) + 5 * 60))
while [ $check -lt 1 ];
do
    check=`kubectl get deployment ${application_name}-${build_id} -o yaml --namespace=$namespace | grep "^  availableReplicas:" | cut -d ":" -f 2 | tr -d ' ' | grep -Eo '[0-9]+'`
    if [ "$check" = "" ];
    then
      check=0

      echo -n "."
      sleep 1
    fi

    if [ $(date +%s) -gt "$failtime" ];
    then
         echo "failed"
         kubectl delete hpa ${application_name}-${build_id} --namespace=$namespace
         kubectl delete deployment ${application_name}-${build_id} --namespace=$namespace
         exit 1
    fi
done

echo "done"

# Switch servide to point to new release
echo "Switching to build id: $build_id"
kubectl get services $application_name -o yaml --namespace=$namespace | sed "s/build:.*$/build: \"$build_id\"/" | kubectl replace -f -

# - delete autoscale
kubectl get hpa $current_release --namespace=$namespace > /dev/null 2>&1
if [ $? -eq 0 ];
then
    kubectl delete hpa $current_release --namespace=$namespace
fi

# - delete deployment
kubectl get deployment $current_release --namespace=$namespace > /dev/null 2>&1
if [ $? -eq 0 ];
then
    kubectl delete deployment $current_release --namespace=$namespace
fi
