#!/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

function cleanup()
{
    echo "I got canceled"
}
trap "cleanup" SIGKILL SIGTERM SIGHUP SIGINT

echo "Want to try to see if trap works?"
sleep 15

if [ ! -f config ];
then
    echo "Missing config file" 1>&2
    exit 1
fi
source config

kubectl get namespace $bamboo_CONSUL_ENVIRONMENT > /dev/null 2>&1
if [ $? -ne 0 ];
then
    kubectl create namespace $bamboo_CONSUL_ENVIRONMENT
    echo "Created namespace $bamboo_CONSUL_ENVIRONMENT in cluster"
fi


# Check for klinikk portal
if [ $has_clinic_site -eq 1 ];
then
    method="apply"
    kubectl get ingress "$application_name-clinics" --namespace=$bamboo_CONSUL_ENVIRONMENT > /dev/null 2>&1
    if [ $? -eq 0 ];
    then
        method="replace"
    fi

    cat ingress-klinikk.yaml \
        | sed "s/{{application_name}}/$application_name/" \
        | sed "s/{{namespace}}/$namespace/" \
        | sed "s/{{hostname}}/$aws_hostname_clinic/" \
        | sed "s/{{cert}}/$clinic_cert_name/" \
        | sed "s/{{build_id}}/$build_id/" \
        | kubectl $method -f -
fi

method="apply"
cluster_ip=""
kubectl get service $application_name-$build_id --namespace=$namespace > /dev/null 2>&1
if [ $? -eq 0 ];
then
    echo "Service for application already exists" 1>&2
    method="replace"
    cluster_ip="`kubectl get service $application_name-$build_id -o yaml --namespace=$namespace | grep 'clusterIP:' | cut -d ':' -f 2 | tr -d ' '`"
    build_id="`kubectl get service $application_name-$build_id -o yaml --namespace=$namespace | grep 'build:' | cut -d ':' -f 2 | tr -d ' ' | tr -d '\"'`"
fi

cat service-build.yaml \
    | sed "s/{{application_name}}/$application_name/" \
    | sed "s/{{namespace}}/$namespace/" \
    | sed "s/{{cluster_ip}}/$cluster_ip/" \
    | sed "s/{{build_id}}/$build_id/" \
    | kubectl $method -f -

method="apply"
cluster_ip=""
build_id=0
kubectl get service $application_name --namespace=$namespace > /dev/null 2>&1
if [ $? -eq 0 ];
then
    echo "Service for application already exists" 1>&2
    method="replace"
    cluster_ip="`kubectl get service $application_name -o yaml --namespace=$namespace | grep 'clusterIP:' | cut -d ':' -f 2 | tr -d ' '`"
    build_id="`kubectl get service $application_name -o yaml --namespace=$namespace | grep 'build:' | cut -d ':' -f 2 | tr -d ' ' | tr -d '\"'`"
fi

cat service.yaml \
    | sed "s/{{application_name}}/$application_name/" \
    | sed "s/{{namespace}}/$namespace/" \
    | sed "s/{{cluster_ip}}/$cluster_ip/" \
    | sed "s/{{build_id}}/$build_id/" \
    | kubectl $method -f -
